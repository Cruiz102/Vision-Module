// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_model_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_model_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_model_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_model_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_model_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_model_2eproto_metadata_getter(int index);
class Frame;
struct FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class Frame_Rect;
struct Frame_RectDefaultTypeInternal;
extern Frame_RectDefaultTypeInternal _Frame_Rect_default_instance_;
class Frame_location;
struct Frame_locationDefaultTypeInternal;
extern Frame_locationDefaultTypeInternal _Frame_location_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Frame* Arena::CreateMaybeMessage<::Frame>(Arena*);
template<> ::Frame_Rect* Arena::CreateMaybeMessage<::Frame_Rect>(Arena*);
template<> ::Frame_location* Arena::CreateMaybeMessage<::Frame_location>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Frame_Rect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Frame.Rect) */ {
 public:
  inline Frame_Rect() : Frame_Rect(nullptr) {}
  virtual ~Frame_Rect();
  explicit constexpr Frame_Rect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frame_Rect(const Frame_Rect& from);
  Frame_Rect(Frame_Rect&& from) noexcept
    : Frame_Rect() {
    *this = ::std::move(from);
  }

  inline Frame_Rect& operator=(const Frame_Rect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame_Rect& operator=(Frame_Rect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frame_Rect& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frame_Rect* internal_default_instance() {
    return reinterpret_cast<const Frame_Rect*>(
               &_Frame_Rect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Frame_Rect& a, Frame_Rect& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame_Rect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame_Rect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame_Rect* New() const final {
    return CreateMaybeMessage<Frame_Rect>(nullptr);
  }

  Frame_Rect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame_Rect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame_Rect& from);
  void MergeFrom(const Frame_Rect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame_Rect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Frame.Rect";
  }
  protected:
  explicit Frame_Rect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_model_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
    kWidthFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
  };
  // int32 height = 1;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 width = 2;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 x = 3;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 4;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Frame.Rect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_model_2eproto;
};
// -------------------------------------------------------------------

class Frame_location PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Frame.location) */ {
 public:
  inline Frame_location() : Frame_location(nullptr) {}
  virtual ~Frame_location();
  explicit constexpr Frame_location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frame_location(const Frame_location& from);
  Frame_location(Frame_location&& from) noexcept
    : Frame_location() {
    *this = ::std::move(from);
  }

  inline Frame_location& operator=(const Frame_location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame_location& operator=(Frame_location&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frame_location& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frame_location* internal_default_instance() {
    return reinterpret_cast<const Frame_location*>(
               &_Frame_location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Frame_location& a, Frame_location& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame_location* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame_location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame_location* New() const final {
    return CreateMaybeMessage<Frame_location>(nullptr);
  }

  Frame_location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame_location>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame_location& from);
  void MergeFrom(const Frame_location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame_location* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Frame.location";
  }
  protected:
  explicit Frame_location(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_model_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Frame.location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_model_2eproto;
};
// -------------------------------------------------------------------

class Frame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Frame) */ {
 public:
  inline Frame() : Frame(nullptr) {}
  virtual ~Frame();
  explicit constexpr Frame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frame& default_instance() {
    return *internal_default_instance();
  }
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(nullptr);
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Frame";
  }
  protected:
  explicit Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_model_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef Frame_Rect Rect;
  typedef Frame_location location;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kLocationInfFieldNumber = 1,
    kRectInfFieldNumber = 2,
    kIdFieldNumber = 3,
    kDistanceFieldNumber = 5,
  };
  // string name = 4;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .Frame.location location_inf = 1;
  bool has_location_inf() const;
  private:
  bool _internal_has_location_inf() const;
  public:
  void clear_location_inf();
  const ::Frame_location& location_inf() const;
  ::Frame_location* release_location_inf();
  ::Frame_location* mutable_location_inf();
  void set_allocated_location_inf(::Frame_location* location_inf);
  private:
  const ::Frame_location& _internal_location_inf() const;
  ::Frame_location* _internal_mutable_location_inf();
  public:
  void unsafe_arena_set_allocated_location_inf(
      ::Frame_location* location_inf);
  ::Frame_location* unsafe_arena_release_location_inf();

  // .Frame.Rect rect_inf = 2;
  bool has_rect_inf() const;
  private:
  bool _internal_has_rect_inf() const;
  public:
  void clear_rect_inf();
  const ::Frame_Rect& rect_inf() const;
  ::Frame_Rect* release_rect_inf();
  ::Frame_Rect* mutable_rect_inf();
  void set_allocated_rect_inf(::Frame_Rect* rect_inf);
  private:
  const ::Frame_Rect& _internal_rect_inf() const;
  ::Frame_Rect* _internal_mutable_rect_inf();
  public:
  void unsafe_arena_set_allocated_rect_inf(
      ::Frame_Rect* rect_inf);
  ::Frame_Rect* unsafe_arena_release_rect_inf();

  // int32 id = 3;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float distance = 5;
  void clear_distance();
  float distance() const;
  void set_distance(float value);
  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);
  public:

  // @@protoc_insertion_point(class_scope:Frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::Frame_location* location_inf_;
  ::Frame_Rect* rect_inf_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  float distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_model_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Frame_Rect

// int32 height = 1;
inline void Frame_Rect::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame_Rect::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame_Rect::height() const {
  // @@protoc_insertion_point(field_get:Frame.Rect.height)
  return _internal_height();
}
inline void Frame_Rect::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void Frame_Rect::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:Frame.Rect.height)
}

// int32 width = 2;
inline void Frame_Rect::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame_Rect::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame_Rect::width() const {
  // @@protoc_insertion_point(field_get:Frame.Rect.width)
  return _internal_width();
}
inline void Frame_Rect::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void Frame_Rect::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:Frame.Rect.width)
}

// int32 x = 3;
inline void Frame_Rect::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame_Rect::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame_Rect::x() const {
  // @@protoc_insertion_point(field_get:Frame.Rect.x)
  return _internal_x();
}
inline void Frame_Rect::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void Frame_Rect::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Frame.Rect.x)
}

// int32 y = 4;
inline void Frame_Rect::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame_Rect::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame_Rect::y() const {
  // @@protoc_insertion_point(field_get:Frame.Rect.y)
  return _internal_y();
}
inline void Frame_Rect::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void Frame_Rect::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Frame.Rect.y)
}

// -------------------------------------------------------------------

// Frame_location

// float x = 1;
inline void Frame_location::clear_x() {
  x_ = 0;
}
inline float Frame_location::_internal_x() const {
  return x_;
}
inline float Frame_location::x() const {
  // @@protoc_insertion_point(field_get:Frame.location.x)
  return _internal_x();
}
inline void Frame_location::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Frame_location::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Frame.location.x)
}

// float y = 2;
inline void Frame_location::clear_y() {
  y_ = 0;
}
inline float Frame_location::_internal_y() const {
  return y_;
}
inline float Frame_location::y() const {
  // @@protoc_insertion_point(field_get:Frame.location.y)
  return _internal_y();
}
inline void Frame_location::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Frame_location::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Frame.location.y)
}

// float z = 3;
inline void Frame_location::clear_z() {
  z_ = 0;
}
inline float Frame_location::_internal_z() const {
  return z_;
}
inline float Frame_location::z() const {
  // @@protoc_insertion_point(field_get:Frame.location.z)
  return _internal_z();
}
inline void Frame_location::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Frame_location::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Frame.location.z)
}

// -------------------------------------------------------------------

// Frame

// .Frame.location location_inf = 1;
inline bool Frame::_internal_has_location_inf() const {
  return this != internal_default_instance() && location_inf_ != nullptr;
}
inline bool Frame::has_location_inf() const {
  return _internal_has_location_inf();
}
inline void Frame::clear_location_inf() {
  if (GetArena() == nullptr && location_inf_ != nullptr) {
    delete location_inf_;
  }
  location_inf_ = nullptr;
}
inline const ::Frame_location& Frame::_internal_location_inf() const {
  const ::Frame_location* p = location_inf_;
  return p != nullptr ? *p : reinterpret_cast<const ::Frame_location&>(
      ::_Frame_location_default_instance_);
}
inline const ::Frame_location& Frame::location_inf() const {
  // @@protoc_insertion_point(field_get:Frame.location_inf)
  return _internal_location_inf();
}
inline void Frame::unsafe_arena_set_allocated_location_inf(
    ::Frame_location* location_inf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_inf_);
  }
  location_inf_ = location_inf;
  if (location_inf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Frame.location_inf)
}
inline ::Frame_location* Frame::release_location_inf() {
  
  ::Frame_location* temp = location_inf_;
  location_inf_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Frame_location* Frame::unsafe_arena_release_location_inf() {
  // @@protoc_insertion_point(field_release:Frame.location_inf)
  
  ::Frame_location* temp = location_inf_;
  location_inf_ = nullptr;
  return temp;
}
inline ::Frame_location* Frame::_internal_mutable_location_inf() {
  
  if (location_inf_ == nullptr) {
    auto* p = CreateMaybeMessage<::Frame_location>(GetArena());
    location_inf_ = p;
  }
  return location_inf_;
}
inline ::Frame_location* Frame::mutable_location_inf() {
  // @@protoc_insertion_point(field_mutable:Frame.location_inf)
  return _internal_mutable_location_inf();
}
inline void Frame::set_allocated_location_inf(::Frame_location* location_inf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete location_inf_;
  }
  if (location_inf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(location_inf);
    if (message_arena != submessage_arena) {
      location_inf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location_inf, submessage_arena);
    }
    
  } else {
    
  }
  location_inf_ = location_inf;
  // @@protoc_insertion_point(field_set_allocated:Frame.location_inf)
}

// .Frame.Rect rect_inf = 2;
inline bool Frame::_internal_has_rect_inf() const {
  return this != internal_default_instance() && rect_inf_ != nullptr;
}
inline bool Frame::has_rect_inf() const {
  return _internal_has_rect_inf();
}
inline void Frame::clear_rect_inf() {
  if (GetArena() == nullptr && rect_inf_ != nullptr) {
    delete rect_inf_;
  }
  rect_inf_ = nullptr;
}
inline const ::Frame_Rect& Frame::_internal_rect_inf() const {
  const ::Frame_Rect* p = rect_inf_;
  return p != nullptr ? *p : reinterpret_cast<const ::Frame_Rect&>(
      ::_Frame_Rect_default_instance_);
}
inline const ::Frame_Rect& Frame::rect_inf() const {
  // @@protoc_insertion_point(field_get:Frame.rect_inf)
  return _internal_rect_inf();
}
inline void Frame::unsafe_arena_set_allocated_rect_inf(
    ::Frame_Rect* rect_inf) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rect_inf_);
  }
  rect_inf_ = rect_inf;
  if (rect_inf) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Frame.rect_inf)
}
inline ::Frame_Rect* Frame::release_rect_inf() {
  
  ::Frame_Rect* temp = rect_inf_;
  rect_inf_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Frame_Rect* Frame::unsafe_arena_release_rect_inf() {
  // @@protoc_insertion_point(field_release:Frame.rect_inf)
  
  ::Frame_Rect* temp = rect_inf_;
  rect_inf_ = nullptr;
  return temp;
}
inline ::Frame_Rect* Frame::_internal_mutable_rect_inf() {
  
  if (rect_inf_ == nullptr) {
    auto* p = CreateMaybeMessage<::Frame_Rect>(GetArena());
    rect_inf_ = p;
  }
  return rect_inf_;
}
inline ::Frame_Rect* Frame::mutable_rect_inf() {
  // @@protoc_insertion_point(field_mutable:Frame.rect_inf)
  return _internal_mutable_rect_inf();
}
inline void Frame::set_allocated_rect_inf(::Frame_Rect* rect_inf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rect_inf_;
  }
  if (rect_inf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rect_inf);
    if (message_arena != submessage_arena) {
      rect_inf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rect_inf, submessage_arena);
    }
    
  } else {
    
  }
  rect_inf_ = rect_inf;
  // @@protoc_insertion_point(field_set_allocated:Frame.rect_inf)
}

// int32 id = 3;
inline void Frame::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Frame::id() const {
  // @@protoc_insertion_point(field_get:Frame.id)
  return _internal_id();
}
inline void Frame::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Frame::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Frame.id)
}

// string name = 4;
inline void Frame::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Frame::name() const {
  // @@protoc_insertion_point(field_get:Frame.name)
  return _internal_name();
}
inline void Frame::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Frame.name)
}
inline std::string* Frame::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Frame.name)
  return _internal_mutable_name();
}
inline const std::string& Frame::_internal_name() const {
  return name_.Get();
}
inline void Frame::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Frame::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Frame.name)
}
inline void Frame::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Frame.name)
}
inline void Frame::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Frame.name)
}
inline std::string* Frame::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Frame::release_name() {
  // @@protoc_insertion_point(field_release:Frame.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Frame::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Frame.name)
}

// float distance = 5;
inline void Frame::clear_distance() {
  distance_ = 0;
}
inline float Frame::_internal_distance() const {
  return distance_;
}
inline float Frame::distance() const {
  // @@protoc_insertion_point(field_get:Frame.distance)
  return _internal_distance();
}
inline void Frame::_internal_set_distance(float value) {
  
  distance_ = value;
}
inline void Frame::set_distance(float value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:Frame.distance)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_model_2eproto
